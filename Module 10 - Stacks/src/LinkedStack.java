import java.util.*;/** * A class of stacks whose entries are stored in a chain of nodes. *  * @author Frank M. Carrano * @author Timothy M. Henry * @version 5.0 */public final class LinkedStack<T> implements StackInterface<T> {		private Node topNode; // References the first node in the chain		public LinkedStack() {		topNode = null;	} 	public void push(T newEntry) {		Node newNode = new Node(newEntry, topNode);		topNode = newNode;		//    topNode = new Node(newEntry, topNode); // Alternate code	} 	public T peek() {		if (isEmpty())			throw new EmptyStackException();		else			return topNode.getData();	} // end peek	public T pop() {		T top = peek(); // Might throw EmptyStackException		topNode = topNode.getNextNode();		return top;	} 	public boolean isEmpty() {		return topNode == null;	} 	public void clear() {		topNode = null; 	} 	@Override	public String toString() {		String s = "";		Node current = topNode;		while (current != null) {			s = current.data + " " + s;			current = current.next;		}		return s;	}	public boolean priorityPush(T element) {		//if stack is empty		if (isEmpty()) {			push(element);			return false;		}		boolean found = false;		Node currentNode = topNode;				//determine if element is in chain of node		while(currentNode != null && !found) {			if(currentNode.data.equals(element))				found = true;			currentNode = currentNode.next;		}				//element is not in chain of node		if (!found) {			push(element);			return false;		}					else { //found matching element			if (peek()==element)  //target is already at top				return true;						//find node before target. tempNode will hold the reference to before the target			Node tempNode= topNode;			while (tempNode.next.data.equals(element) == false) {				tempNode = tempNode.next;			}						//switch-a-roo			Node target = tempNode.next; //t			tempNode.next = tempNode.next.next;			target.next = topNode;			topNode = target;			return true;		}			}	public T peekNext() {		if(isEmpty() || (topNode.next == null)) //empty or singleton			throw new EmptyStackException();		else 			return topNode.next.data;				}		private class Node {		private T data; 		private Node next; 		private Node(T dataPortion) {			this(dataPortion, null);		} 		private Node(T dataPortion, Node linkPortion) {			data = dataPortion;			next = linkPortion;		}		private T getData() {			return data;		}		private void setData(T newData) {			data = newData;		}		private Node getNextNode() {			return next;		} 		private void setNextNode(Node nextNode) {			next = nextNode;		} 	} } 